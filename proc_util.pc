/* {{{

    This file is part of libtraceproc - a library for tracing Pro*C/OCI calls

    Copyright (C) 2013 Georg Sauthoff <mail@georg.so>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

}}} */


#include <string.h>
#include <stdio.h>
#include <stdlib.h>


#include <sqlcpr.h>
EXEC ORACLE OPTION (ORACA=YES);
EXEC SQL INCLUDE ORACA; 

#include "ora_util.h"

#include "ret_check.h"

#include "proc_util.h"

void proc_error(int errorcode, struct oraca *o, const char *extra_msg, const char *func,
    const char *filename, int line)
{
  char msg[512] = "NOMSG";
  if (errorcode)
  {
    size_t size = 511;
    size_t ret = 0;
    sqlglm((unsigned char*)msg, &size, &ret);
    msg[ret] = 0;
  }
  fprintf(stderr, "%s() %s:%d: %s%sSQL-Error: %s (%.*s)\n",
      func, filename, line,
      extra_msg ? extra_msg : "",
      extra_msg ? ", " : "",
      msg,
      o->orastxt.orastxtl, o->orastxt.orastxtc
      );
}

int proc_connect()
{
  char username[32] = {0};
  char password[32] = {0};
  char dbspec[32] = {0};

  char at[32] = "orcl";

  int ret = ora_init_vars2(username, password, dbspec, 31);
  IFTRUERET(ret, 0, -1);

  proc_init_oraca();
  if (at[0] == 'o') {
  EXEC SQL CONNECT :username IDENTIFIED BY :password
      USING :dbspec;
  } else {
  EXEC SQL CONNECT :username IDENTIFIED BY :password
      AT :at USING :dbspec;
  }
  IFSQLRET(0, -1);

  return 0;
}


int proc_disconnect_commit()
{
  EXEC SQL COMMIT WORK RELEASE;
  IFSQLRET(0, -1);
  return 0;
}

int proc_disconnect_rollback()
{
  EXEC SQL ROLLBACK WORK RELEASE;
  IFSQLRET(0, -1);
  return 0;
}


